apiVersion: v1
kind: Secret
metadata:
  name: ssl
type: kubernetes.io/tls
data:
  tls.crt: certificate
  tls.key: key
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx
data:
  # Adding new entries here will make them appear as files in the deployment.
  # Please update k8s.io/k8s.io/README.md when you update this file
  nginx.conf: |
    worker_processes 5;
    events {
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: www-get
data:
  # Adding new entries here will make them appear as files in the deployment.
  get-kube-insecure.sh: |
    #!/bin/bash
    echo Install Kubernetes securely:
    echo curl -sS https://get.k8s.io | bash
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: k8s-io
  labels:
    app: k8s-io
    version: v1
spec:
  replicas: 2
  # selector defaults to template's labels
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: k8s-io
        version: v1
    spec:
      terminationGracePeriodSeconds: 5
      volumes:
      - name: nginx
        configMap:
          name: nginx
          # Map all keys to files.
      - name: www-get
        configMap:
          name: www-get
          # Map all keys to files.
      - name: ssl
        secret:
          secretName: ssl
          # Map all keys to files.
      containers:
      - name: nginx
        image: nginx:1.10-alpine  # = :stable-alpine as of 8/23/2016
        resources:
          limits:
            cpu: 1
            memory: 512Mi
        ports:
        - name: http
          containerPort: 80
        - name: https
          containerPort: 443
        livenessProbe:
          httpGet:
            path: /_healthz
            port: 80
          initialDelaySeconds: 3
          timeoutSeconds: 2
          failureThreshold: 2
        volumeMounts:
        - name: nginx
          mountPath: /etc/nginx
          readOnly: true
        - name: www-get
          mountPath: /www/get
          readOnly: true
        - name: ssl
          mountPath: /certs
          readOnly: true